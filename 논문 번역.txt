========================================================
ABSTRACT
  우리는 경계를 동시에 추적하여 이미지를 하나의 래스터 스캔으로 라벨링하는 새로운 알고리즘을 제안한다. 이 알고리즘은 몇 가지 장점을 가지고 있다. 일반적인 2-래스터 스캔 알고리즘에 사용되는 런의 연결성을 복원하기 위해 큰 버퍼가 필요하지 않다. 래스터 스캔 하나만 사용하기 때문에 2래스터 스캔 알고리즘보다 더 빨리 라벨을 붙일 수 있다. 또한 각 지역에 대한 위상학적 특성(홀의 존재 등)을 라벨링과 동시에 검출할 수 있다.





========================================================
1. Introduction
  영상에서 개체를 인식할 때 가장 일반적인 방법은 먼저 영상을 영역으로 분할한 다음 영역에 레이블을 지정하는 것이다. 동일한 영역의 모든 점에 동일한 라벨이 부여된다. 이 과정을 지역 라벨링이라고 한다. 정상 라벨링 알고리즘은 두 개의 래스터 스캔을 수행한다. 첫 번째 스캔에서 각 수평 실행(동일한 영역과 동일한 선의 연속 지점)에 임시 라벨이 할당된다. 두 번째 스캔에서 라벨 번호는 테이블의 기록에 따라 재할당된다(즉, 연결된 실행이 병합됨). 또 다른 알고리즘은 영역의 초기 라벨링된 지점에서 전파를 통해 영역을 라벨링한다. 그러나 이 알고리즘은 직렬 컴퓨터에 매우 많은 시간을 소비한다. 따라서 래스터 스캔 유형 알고리즘이 더 일반적으로 사용된다.
  본 논문에서는 경계를 동시에 추적하여 이미지를 하나의 래스터 스캔으로 라벨링하는 새로운 알고리즘을 제안한다. 이 알고리즘은 위에서 언급한 전파 절차가 필요하지 않다는 장점이 있으며, 각 실행의 연결성을 기록하기 위해 메모리가 필요하지 않다. 래스터 스캔은 1개만 사용하기 때문에 2개 래스터 스캔 알고리즘보다 더 빨리 라벨을 붙일 수 있다. 동시에 각 지역의 위상 특성(홀의 존재 등)을 검출할 수 있다.





========================================================
2. 방법의 개요
  한 지역의 특별한 관심사는 왼쪽 이웃이 같은 지역의 일부가 아닌 사람들이다. 이 지점들은 지역 경계선상에 있으며 운행을 개시한다. 그것들은 지역 경계를 추적하는 절차로 라벨이 붙어 있다. 라벨을 올바르게 지정할 수 있다면, 동일한 런에 있는 지역에 있는 다른 지점들은 래스터 스캔에서 왼쪽에서 오른쪽으로 전파하여 라벨을 표시할 수 있다. 이 점들은 각각 주변 경계와 구멍 경계를 추적하여 얻은 점들에서 선택한다. 새로운 영역의 첫 번째 지점이 발견되었다고 가정하자(그림.lb의 화살표(->)). 이 점은 새로운 라벨을 붙인다.
  이 시작점에서 주변 경계가 추적되고 실행을 시작하는 지점(그림 la에 'a'로 표시됨)에 동일한 라벨이 부여된다. 마찬가지로 'B'와 'C'와 같은 지점에서 우리는 한 영역의 구멍의 경계를 추적할 수 있으며, 해당 지점 b와 c에 동일한 영역 라벨을 부착할 수 있다. 래스터 스캐닝을 통해 이 라벨 번호를 다른 점으로 전파함으로써, 우리는 라벨링된 영역을 얻을 수 있다.





========================================================
3. 알고리즘 설명
  입력 이미지의 각 점은 '0' 또는 'R' 값 중 하나로 초기화된다. 배경(이진화된 영상의 경우) 또는 가장자리(가장자리 영상의 경우)는 '0'으로 표시되어 있다. 라벨링할 포인트는 'R'로 설정된다(그림 2a 참조). 'R'을 음의 정수로 표시함으로써, 지역들은 '1'부터 연속적으로 라벨을 붙인다. 레지스터는 현재 라벨 번호를 저장하고 처음에는 '0'으로 설정된다. 스캔한 점에 '0'이라는 라벨이 붙거나 양수(즉, 이미 라벨이 붙어 있는 경우)가 있으면 다음 점이 스캔된다. 점의 값이 'R'이면 이 점에는 라벨이 붙어 있지 않다. 우리는 세 가지 경우를 구별할 수 있다: 지점은 주변 경계에 있고, 지점은 구멍 경계에 있거나, 지점이 지역 내에 있다. 사례의 경우 이전에 스캔한 지점의 라벨을 위에서 보고 결정하며, 이에 따라 라벨링 절차가 선택된다. 4개의 연결 지역에 대한 절차는 다음과 같다. 그런 다음 8개의 연결 영역으로의 확장을 고려한다.

(a) 지역 주변경계 추적
그림 3a에 나타난 경우를 생각해 보자. 왼쪽 점과 위의 점이 모두 '0'(즉, 지역에 속하지 않음)이다. 따라서 현재 지점은 주변 경계에 있으며, 새로운 지역에 라벨을 붙이는 첫 번째 지점이다. 현재 지점에 새 라벨을 제공한 후, 다음 방법으로 왼쪽 이웃이 해당 지역 외부에 있는 주변 경계와 라벨 지점을 추적한다.
1. 각 전류 지점에 대해 현재 지점에 도달하기 위해 통과된 방향을 나타내는 방향 코드 D가 그림 4와 같이 결정된다(시작점은 이 방향 코드를 0으로 설정).
2. 경계의 다음 점은 D - 1에서 주어진 방향으로 'R'(아직 라벨이 붙어 있지 않음) 또는 'K'(준비된 라벨 영역) 값을 가진 점이 발견될 때까지 시계 방향으로 검색하면(즉, D 증가)된다. 이것이 경계의 다음 지점이 된다.

Figure 2: 구멍이 있는 영역에 라벨을 부착하는 예.
Figure 3: 4개의 연결 영역에 대한 라벨링 및 추적 조건.
Figure 4: 4개 인접 경계 추적에서 현재 지점(*)에서 다음 지점까지의 방향 코드.

3. 현재 지점은 초기화가 실행되는 지점이기 때문에 왼쪽 이웃이 해당 지역 외부에 있는 경우에만 라벨이 지정된다. 라벨링 결정은 이전 지점에서 현재 지점까지의 방향과 현재 지점에서 다음 지점까지의 방향에 따라 결정된다. 조건은 표 1에 설명되어 있다. 기본적으로 우리가 시계방향으로 주변 경계를 추적할 때, 그리고 시계 반대 방향으로 구멍 경계를 추적할 때, 원하는 점은 "아래에서 위까지" 추적된다.
4. 방향 코드가 업데이트되고 경계가 완전히 추적될 때까지 절차가 반복된다(즉, 현재 지점이 시작 지점과 같고 다음 지점까지의 방향이 시작 지점의 방향과 동일함). 이 경계 추적 및 라벨링의 결과는 그림 2b와 같다.

(b) 동일한 수평 주행의 점으로 전파
그림 3b에 표시된 왼쪽 점이 'K'( >0)로 표시된 경우를 고려한다. 현재 지점도 같은 지역 'K'에 속하며 그에 따라 라벨을 붙인다. 따라서 수평 주행의 라벨이 없는 나머지 모든 지점에 동일한 값이 전파된다. 예를 들어, 이 점에 의해 라벨이 부착된 점은 그림 2b에서 그림 2c까지의 이 절차로 라벨이 부착된다.

(c) 구멍의 경계 추적
위의 포인트는 이미 'K'라고 라벨을 붙인 반면, 그림 3c에서 왼쪽 포인트가 '0'(즉, 에지 포인트 또는 배경)인 경우를 생각해 보자. 현재 점 역시 동일한 영역의 일부로 'K'라고 표시되어 있다(그림 2c의 화살표로 표시된 점 참조). 사실 이 지점이 그 지역의 주변 경계선에 있었다면, 그 이전에 주변 경계 추적 절차에 의해 라벨이 붙었을 것이기 때문에, 그것은 그 지역의 내부 경계(구멍의 경계)에 있다. 그런 다음 구멍 경계선을 추적하고 말초 경계 추적 절차와 동일한 방법으로 왼쪽 측면 지점에 라벨을 붙인다. 동일한 방향 코드와 의사결정 표를 사용하여 구멍 경계를 반대 방향으로 추적한다. 왼쪽 이웃이 구멍 가장자리인 지점만 레이블 지정됨. 이것은 그림 2d에 설명되어 있다.

  위의 절차는 래스터 스캔이 끝날 때까지 반복된다. 그 결과 모든 영역에는 그림 2e와 같이 1에서 N까지의 일련 번호(이미지의 지역 수)가 할당된다.
  표 1에 나온 사례 중 일부에 라벨을 붙이지 않는 이유가 있다. 그림 5a에 있는 영역의 주변 경계에 모든 점의 라벨을 붙이도록 하자. 그림 5a에는 구멍이 있고 너비 1의 얇은 부분이 있다. 주변 경계와 래스터 스캐닝에 라벨을 붙인 후 그림 5b의 화살표(- >)로 표시된 지점에 도착한다. 이 점은 새로운 지역으로 간주된다. 우리는 구멍을 찾지 못할 뿐만 아니라 같은 지역의 일부에 다른 숫자로 라벨을 붙인다.

Table 1: 4개의 연결된 영역에 대한 경계 라벨링 조건(o: do label, x: don't label, blank: 상관 없음).

Figure 5: 불법 레이블 지정: (a) 폭 1의 홀과 얇은 부분이 있는 영역; (b) 주변 경계의 모든 점에 라벨을 부착한 결과

Figure 6: labeling legally.

Figure 7: 8개의 연결 영역에 대한 라벨링 및 추적 조건.

Figure 8: 8개 인접 경계 추적에서 현재 지점(*)에서 다음 지점까지의 방향 코드.

Table 2: 8개의 연결된 영역에 대한 경계 라벨링 조건(o: do label, x: don't label, -:not no, blank:상관 없음).

  이 경우 우리의 알고리즘은 먼저 그림 6a와 같이 주변 경계의 부분에 라벨을 붙인다. 래스터 스캐닝을 한 후, 우리는 그림 6b의 화살표(->)로 표시된 지점에 도착하는데, 여기서 우리는 구멍의 존재를 안다. 구멍 경계를 추적하여 그림 6c와 같이 경계 부분에 라벨을 붙인다. 그리고, 그림 6d와 같이 래스터 스캔이 끝날 때쯤 영역의 나머지 지점들은 수평 전파를 통해 적절히 라벨을 붙인다.
  4개의 연결 지역에 대한 절차는 위에서 간략히 설명하였다. 8개의 연결 사례로 절차를 확장한다. 그림 3의 경계 검색 패턴을 그림 7의 경계 검색 패턴으로 변경하고, 그림 8에 표시된 방향 코드를 사용한다. 우리는 8개의 이웃에서 경계선을 추적하고 표 2에 따라 경계점에 라벨을 붙인다.





========================================================
4. 비교 연구
  우리는 우리의 알고리즘과 일반적인 2-래스터 스캔 알고리즘을 메모리 액세스와 비교한다. 우리는 m 포인트와 n 포인트의 경계가 있는 이미지 또는 영역을 라벨링하는 경우를 고려한다. 처음에 우리는 4개의 연결 지역을 추정했다. 정상 알고리즘[1]에 의해, 첫 번째 래스터 스캔에서, 우리는 지역의 각 지점에 대해 2개의 메모리 읽기(위 지점 그 자체와 위의 지점)와 1개의 메모리 쓰기가 필요하다. 두 번째 검색에서는 메모리 읽기 1개와 메모리 쓰기 1개가 필요하다. 총 5m의 메모리 액세스가 필요한 일반 알고리즘이다. 우리의 알고리즘으로, 우리는 래스터 스캔의 각 영역 포인트에 대해 1개의 메모리 읽기 및 1개의 메모리 쓰기가 필요하고, 경계 추적에서 검색하기 위해서는 평균 2개의 메모리 읽기와 0.5개의 메모리 쓰기가 필요하다. 총 5m 이상의 메모리 액세스에 비해 우리의 알고리즘은 평균 2m + 2.5n이 필요하다. 이는 3m - 2.5n의 메모리 액세스를 절약하는 것을 의미한다. m은 일반 영상에서 n보다 훨씬 크기 때문에 우리의 알고리즘은 일반 알고리즘보다 더 빨리 영상에 라벨을 붙일 수 있다. 8개의 연결된 영역의 경우, 정상 알고리즘은 총 7m의 메모리 액세스(읽기 4개와 쓰기 1개의 첫 번째 검색, 읽기 1개와 쓰기 1개의 두 번째 검색)를 필요로 한다. 우리의 알고리즘에는 총 2m + 3.5n 메모리 액세스 권한이 필요하다. (읽기 1과 쓰기 1의 래스터 스캔과 평균 읽기 3과 쓰기 0.5의 경계 추적). 이는 5m - 3.5n 메모리 액세스를 절약하는 것을 의미한다.





========================================================
5. 실험 결과
  알고리즘은 약 100개의 영역이 포함된 실제 장면 영상에서 테스트되었다(그림 9). SUN3/260 워크스테이션의 경과된 CPU 시간을 측정하고 비교했다. 4개의 연결 부위의 경우, 결과는 그림 10에 나타나 있다. 우리의 알고리즘은 일반 알고리즘보다 약 2배 빠르다. 8개의 연결 부위의 경우, 결과는 그림 11에 나타나 있다. 우리의 알고리즘은 약 3.5배 더 빠르다. 물론 우리가 경계 정보에만 관심이 있고 지역 내의 지점 표시에도 관심이 있다면 우리의 방법은 더욱 단순화될 수 있다. 이렇게 하면 메모리와 CPU 시간이 절약된다. 그림 10과 11은 이 단순화된 경계 추적 알고리즘의 개선된 성능을 보여준다. 4개 연결부위의 경우 약 4배, 8개 연결부위의 경우 일반 알고리즘보다 약 8배 빠르다.

Figure 10: 4개의 연결 부위의 실험 결과 비교.





========================================================
6. 결론
  하나의 래스터 스캔과 경계 추적을 사용하는 제안된 방법은 여러 가지 장점이 있다. 알고리즘은 2-래스터 스캔 알고리즘에 사용되는 런의 연결성을 기록하기 위해 큰 버퍼가 필요하지 않다. 우리의 알고리즘은 하나의 래스터 스캔에 효과적으로 이미지를 표시한다. 또한 지역에 라벨을 붙이는 것과 동시에 경계 특성을 결정할 수 있다. 알고리즘은 하드웨어에서 구현될 수 있으며, 프로토타입 시스템은 현재 구축되고 있다.

Figure 11: 8개 연결부위의 실험결과 비교





========================================================
ACKNOWLEDGMENTS
  저자들은 이 논문의 가독성을 향상시키는 데 도움이 된 논평과 비평에 대해 R. Cipolla씨에게 감사하고 유용한 토론을 위해 ETL의 회원들에게 감사한다.
